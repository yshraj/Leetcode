 void dfs(int i,int n,vector<vector<int>>& ans,vector<vector<int>>& graph,vector<int>& temp)
    {
        if(i==n) 
        {
            ans.push_back(temp);
        }
        
        for(auto it:graph[i])
        {
            temp.push_back(it);
            dfs(it,n,ans,graph,temp);  
        }
        temp.pop_back();
        return;
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) 
    {
        int n = graph.size();
        
        vector<vector<int>> ans;
        vector<int> temp;
        
        temp.push_back(0);
        
        dfs(0,n-1,ans,graph,temp);
        return ans;    
    }
