void dfs(int x,int y,vector<vector<char>>& board)
    {
        if(x<0 || x>=board.size() || y<0 || y>=board[0].size()) return;
        
        if(board[x][y]=='O') 
        {
            board[x][y]='1';
        
            dfs(x+1,y,board);
            dfs(x,y+1,board);
            dfs(x-1,y,board);
            dfs(x,y-1,board);
        }
    }
    void solve(vector<vector<char>>& board) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        int r=board.size();
        if(r<=1)
            return;
        int c=board[0].size();
        if(c<=1)
            return;
        
        for(int i=0;i<r;i++) 
        {
            dfs(i,0,board);
            dfs(i,c-1,board);
        }
        for(int i=0;i<c;i++) 
        {
            dfs(0,i,board);
            dfs(r-1,i,board);
        }
        
        for(int i=0;i<r;i++) 
        {
            
            for(int j=0;j<c;j++) 
        {
         if(board[i][j]=='1')
         {
             board[i][j]='O';
             
         }
           else if(board[i][j]=='O')
         {
             board[i][j]='X';
             
         }      
                
        }
            
        }
        
    }
