//105. Construct Binary Tree from Preorder and Inorder Traversal
    TreeNode* Build(vector<int>& preorder,int prestart,int preend ,vector<int>& inorder,int instart,int inend,map<int,int> &map)
    {
        if(prestart>preend || instart>inend)
        {
            return NULL;
        }
        
        TreeNode * temp = new TreeNode(preorder[prestart]);
        
        int hash = map[temp->val];
        int numleft = hash - instart;
        
        temp->left = Build(preorder,prestart+1,prestart+numleft,inorder,instart,hash-1,map);
        
        temp->right = Build(preorder,prestart+numleft+1,preend,inorder,hash+1,inend,map);

        return temp;
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        
        map<int,int> map;
        int n=preorder.size();
        for(int i=0;i<inorder.size();i++)
        {
            map[inorder[i]] = i;
        }
        TreeNode *root = Build(preorder,0,n-1,inorder,0,n-1,map);
        
        return root;
        
        
    }
