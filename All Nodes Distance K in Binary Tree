 void parent_mark(unordered_map<TreeNode*,TreeNode*> &parent ,TreeNode* root )
    {
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())
        {
            TreeNode* temp = q.front();
            q.pop();
            
            if(temp->left)
            {
                parent[temp->left] = temp;
                q.push(temp->left);
            }
             if(temp->right)
            {
                parent[temp->right] = temp;
                q.push(temp->right);
            }
            
            
        }
        
        
    }
    public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) 
    {
        vector<int> ans;
        
        unordered_map<TreeNode*,TreeNode*> parent;
        parent_mark(parent,root);
        
        unordered_map<TreeNode*,bool> visited;

        queue<TreeNode*> que;
        que.push(target);
        visited[target] = true;
        int cur=0;
        
        while(!que.empty())
        {
            int size = que.size();
            if( cur++==k) break;
            
            for(int i=0;i<size;i++)
            {
                TreeNode* node = que.front();
                que.pop();
                
                if(node->left && !visited[node->left])
                {
                    que.push(node->left );
                    visited[node->left] = true;
                }
                if(node->right && !visited[node->right])
                {
                    que.push(node->right );
                    visited[node->right] = true;
                }
                if(parent[node] && !visited[parent[node]])
                {
                    que.push(parent[node] );
                    visited[parent[node]] = true;
                    
                }
            }
            
           
        }
        
vector<int> result;
        while(!que.empty()) {
            TreeNode* current = que.front(); que.pop();
            result.push_back(current->val);
        }
        return result;
    }
